classdef TO
    %TO Summary of this class goes here
    %   Detailed explanation goes here
    
    properties
        m
        n
        xmin
        xmax
        dfdx
        low
        upp
        c
        d
        a0
        a
        outeriter
        maxiter
        inputReader
        mesh
        bcinit
        kkttol
    end
    
    methods
        function obj = TO(inputArg1,inputArg2)
            m=length(con_name);outeriter=0;Conbj=zeros(m,1);
            storagecte=zeros(3+m,1);    storagecte(1:3)=[kkttol Vinf Vsup];
            if dV~=0
            xval=[xx(TOEL)' vx0]';
            n=length(TOEL)+1;
            else
            xval=[xx(TOEL)']';
            n=length(TOEL);
            end
            xmin=zeros(n,1);xmax=ones(n,1);xold1=xval;xold2=xval;
            xmax(end)=scalev;
            dfdx=zeros(m,n);fval=zeros(m,1);
            low     = 0.3;upp     = 0.7;
            c       = ones(m,1)*1000;c(2)=100;
            d       = ones(m,1);
            a0      = 1;
            a       = zeros(m,1);
        end
        
        function outputArg = runMMA(obj,inputArg)
            reader = InputReader("Benchmarks/Elements/input_Benchmark1_LINEARHEX_PARAM.txt");
            fprintf('Initialized InputReader with filename: %s\n', inputfilename);
            mesh = Mesh(reader);
            fprintf('Initialized Mesh\n');
            bcinit = BCInit(reader, mesh);
            solver = Solver();
            
            obj.initMMA() % including dfdx!!! running sensitivities should return dfdx


        while kktnorm > kkttol && outeriter < maxouteriter 
            outeriter = outeriter+1;
            postprocess.save()
            [xmma,ymma,zmma,lam,xsi,eta,mu,zet,s,low,upp] = ...
                mmasub(m,n,outeriter,xval,xmin,xmax,xold1,xold2, ...
                f0val,df0dx,fval,dfdx,low,upp,a0,a,c,d);
            %% Filter densities
            xx=xmma;
            %% New NR starting point
            % New Voltage drop
            Vi=U((Vfnod-1)*2+2,1);Vi=Vi(1);
            if dV~=0
            Vf=Vinf+xmma(end)*dV;
            else
            Vf=Vinf;
            end
            Uin=U;
            Uin(VnodTEC)=(U(VnodTEC)).*Vf/Vi;
            Uin(fixeddofs)=U(fixeddofs);
            Uin((Vfnod-1)*2+2,1)=Vf;

            %% New Solve
            solver = Solver();

            %% New derivatives
            obj.Sensitivities()

            %% MMA parameters update
            xold2=xold1;xold1=xval;
            xval=xmma;
            xvalstore(:,outeriter)=[xx(TOEL)' xmma(end)]';
            xmmastore(:,outeriter)=xval;
            changexval(outeriter)=norm(xold1-xval);
            %% write results
            %WriteResultsitTVU   (folder,InputFileName,datestr0,outeriter,U,Uu,ntot,dfdx,df0dx,xx,TOEL,order,xvtk,yvtk,zvtk,list1,CELL_DATEi,xmma,n,writeopt)
            %                    (folder,nameR,        datestr0,outeriter,U,Uu,ntot,dfdx,df0dx,xx,TOEL,      xvtk,yvtk,zvtk,list1,xmma,n,writeopt,matv,matp,order,coord,sysv,localsys,p,TOtrue,Tref)
            WriteResultsitO      (folder,InputFileName,datestr0,outeriter,U,Uu,ntot,dfdx,df0dx,xx,TOEL,      xvtk,yvtk,zvtk,[],xmma,n,writeopt,matv,matp,order,coord,sysv,localsys,p,TOtrue,Tref,sVM,sigmae,Emin,seebp,rhop)
            %% Convergence
            kktnorm=changexval(outeriter);
            storage(outeriter+1,1:2)=full([outeriter kktnorm]);
            storage(outeriter+1,3)=(f0val);
            storage(outeriter+1,4)=Vf;
            for jjj=1:length(con_name)
                storage(outeriter+1,4+jjj)=fval(jjj);
            end
            if plotstoragetrue==1
                plotstorageCON(1,storage,storagecte, con_name, objkey)
                %drawnow;
                saveas(1,append(folder,InputFileName,'_',datestr0,'_Summary','.svg'))
                saveas(1,append(folder,InputFileName,'_',datestr0,'_Summary','.fig'))
                %close all
            end
            dfCSV=[df0dx,dfdx'];
            %csvFileSensitivities.storeArray(dfCSV);
            writematrix(storage,append(folder,InputFileName,datestr0,'_Storage','.csv'))
    
            ti0=toc(ticTxiVf0)-tocTxiVf0;fprintf("Full time End of iteration %i: %f\n",outeriter,ti0)
        end

        end
    end
end

